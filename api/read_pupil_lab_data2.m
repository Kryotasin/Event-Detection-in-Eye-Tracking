function gazepositions = read_pupil_lab_data2(filename, startRow, endRow)

% Adapted from autogenerated Matlab code

%% Initialize variables.
delimiter = ',';

if nargin<=2
    startRow = 2;  % skip header row in pupil lab csv file
    endRow = inf;  % if not specified, read to EOF
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fprintf('Opening file %s ...\n\n', filename)

fileID = fopen(filename,'r');

%% Read columns of data according to the format.

fprintf('Reading in columns of data ...\n\n')

dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

fprintf('File closed ...\n\n')

%% Convert the contents of columns containing valid numeric text to numbers.
% Replace non-numeric text with NaN.

fprintf('Converting text representing valid numeric values to numbers ...\n\n')

raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1)
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData(row), regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if numbers.contains(',')
                thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'))
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator
                numbers = textscan(char(strrep(numbers, ',', '')), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch
            raw{row, col} = rawData{row};
        end
    end
end


%% Replace non-numeric cells with NaN

fprintf('Replacing non-numeric cells with NaN ...\n\n')

R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable

fprintf('Creating output variables ...\n\n')

gazepositions = table;
gazepositions.timestamp = cell2mat(raw(:, 1));
gazepositions.index = cell2mat(raw(:, 2));
gazepositions.confidence = cell2mat(raw(:, 3));
gazepositions.norm_pos_x = cell2mat(raw(:, 4));
gazepositions.norm_pos_y = cell2mat(raw(:, 5));
gazepositions.base_data = cell2mat(raw(:, 6));
gazepositions.gaze_point_3d_x = cell2mat(raw(:, 7));
gazepositions.gaze_point_3d_y = cell2mat(raw(:, 8));
gazepositions.gaze_point_3d_z = cell2mat(raw(:, 9));
gazepositions.eye_center0_3d_x = cell2mat(raw(:, 10));
gazepositions.eye_center0_3d_y = cell2mat(raw(:, 11));
gazepositions.eye_center0_3d_z = cell2mat(raw(:, 12));
gazepositions.gaze_normal0_x = cell2mat(raw(:, 13));
gazepositions.gaze_normal0_y = cell2mat(raw(:, 14));
gazepositions.gaze_normal0_z = cell2mat(raw(:, 15));
gazepositions.eye_center1_3d_x = cell2mat(raw(:, 16));
gazepositions.eye_center1_3d_y = cell2mat(raw(:, 17));
gazepositions.eye_center1_3d_z = cell2mat(raw(:, 18));
gazepositions.gaze_normal1_x = cell2mat(raw(:, 19));
gazepositions.gaze_normal1_y = cell2mat(raw(:, 20));
gazepositions.gaze_normal1_z = cell2mat(raw(:, 21));
